<rt-import name="*" as="Components" from="components" />

<Components.Popup on="{props.on}" onClose="{props.hide}" rt-stateless>
    <Components.Modal>
        <Components.CardCollapsable title="{props.title}" alwaysOpen>
            <div class="referendum">
                <div class="flex-container align-justify align-middle">
                    <div class="lead uc">
                        <i class="icon icon-box-vote" />
                        <b>{props.on ? props.on.votes.total : 0}</b>
                        <span class="regular"> votes</span>

                    </div>

                    <div class="show-for-large">


                      <div rt-if="props.identity !== null">

                        <div class="referendum__controls uc" rt-if="props.voted === undefined">
                            <span class="green" onClick="{() => props.vote(props.on, 1)}">
                                <i class="icon icon-thumbs-up hoverable" /><span class="hoverable">yes</span>
                            </span>
                            <span class="red" onClick="{() => props.vote(props.on, 0)}">
                                <i class="icon icon-thumbs-down hoverable" /><span class="hoverable"> no</span>
                            </span>
                            <span class="grey" onClick="{() => props.vote(props.on, -1)}">
                                <i class="icon icon-minus hoverable" /><span class="hoverable"> unvote</span>
                            </span>
                        </div>
                        <div rt-if="props.voted !== undefined">
                            You voted
                            <b class="grey" rt-if="props.voted === -1">unvote</b>
                            <b class="green" rt-if="props.voted === 1">yes</b>
                            <b class="red" rt-if="props.voted === 0">no</b>.
                            <span onClick="{() => props.unvote(props.on)}" class="link">Change</span>.
                        </div>
                        <div rt-if="props.status">{props.status}</div>
                      </div>
                      <div rt-if="props.identity === null">
                        Login to Vote
                      </div>
                    </div>
                </div>

                <p class="small-spacing">By executing this action you are agreeing to the EOS constitution and this action associated ricardian contract. The ricardian contract may be viewed in the Scatter approval prompt.</p>

                <div rt-if="props.identity !== null">
                  <div class="small-spacing text-center referendum__controls uc hide-for-large" rt-if="props.voted === undefined">
                      <span class="green" onClick="{() => props.vote(props.on, true)}">
                          <i class="icon icon-thumbs-up hoverable" /> yes
                      </span>
                      <span class="red" onClick="{() => props.vote(props.on, false)}">
                          <i class="icon icon-thumbs-down hoverable" /> no
                      </span>
                  </div>

                  <div class="small-spacing text-center hide-for-large" rt-if="props.voted !== undefined">
                      You voted
                      <b class="grey" rt-if="props.voted === -1">unvote</b>
                      <b class="green" rt-if="props.voted === 1">yes</b>
                      <b class="red" rt-if="props.voted === 0">no</b>.
                      <span onClick="{() => props.unvote(props.on)}" class="link">Change</span>.
                  </div>
                </div>
                <div rt-if="props.identity === null">
                  <div class="small-spacing text-center hide-for-large">
                    Login to Vote
                  </div>
                </div>

                <p class="referendum__stake">
                    <span class="referendum__sub-title">AVAILABLE STAKE</span><br />
                    <b>
                    {
                      props.account ? (Number(props.account.total_resources.cpu_weight.split(' ')[0]) + Number(props.account.total_resources.net_weight.split(' ')[0])).toFixed(4) : Number(0).toFixed(4)
                    }
                    </b> EOS
                </p>

            </div>
        </Components.CardCollapsable>
    </Components.Modal>
</Components.Popup>
